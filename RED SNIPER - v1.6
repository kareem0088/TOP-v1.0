//+------------------------------------------------------------------+
//|                                      Red Sniper                  |
//|                                      Copyright 2024, x1.smc      |
//|                                      https://www.x1smc.com       |
//+------------------------------------------------------------------+


input double start_in_h = 8;
input double stop_in_h = 20;

datetime last_order_closed_time= 0;

double START_BALANCE = 0;
input bool graphic = true ;
input bool summary_box = true;
#property strict

input double point_for_open_new_order_ = 150;
input bool dynamic_lot = true;
input double risk_percentage_ = 3; // risk in percentage
double LotSize = 0.01 ;
input double Fixed_lot = 0.01 ;
input int MAX_OPEN_ORDERS = 5;
input double TakeProfit = 160;
input double StopLoss = 300;

double startingLot;
double currentLot;

//--------------------------------------------------------------------


//  you need to allow connect for http://calendar.fxstreet.com/
#property strict
//
input string nf = "==========  News Filter  ==========";
input string _____ = " ";
input bool NewsFilter = true;                                  // News filter On
input bool CloseBeforeNews = true;                             // Close all positions before news

input string ____ = " ";
input bool NewsImpLow = false;                                  // Low importance news
input bool NewsImpMed = false;                                  // Medium importance news
input bool NewsImpHigh = true;                                 // High importance news

input string ___ = " ";
input int StopBeforeNews = 60;                                 // Stop before news in minutes
input int StartAfterNews = 60;                                 // Start after news in minutes

input string Currencies_Check = "USD,EUR,GBP";     // Currencies (you can edit to add more)

//_______________________________________________________________________________________

//اذا تم التفعيل سوف يتم البحث فقط عن الخبر المحدد فقط
input string __ = " ";
input string _ = "==========  Specific News  ==========";
input bool Check_Specific_News = false;                        // Check specific news
input string Specific_News_Text = "employment";                // Specific news contains

//_______________________________________________________________________________________


bool DrawsNewsChart = true;                              // Shows news on the chart
int X = -100;                                              // News X-Axis position on the chart
int Y = 710;                                             // News Y-Axis position on the chart
string News_Font = "Arial";                              // Font
color Font_Color = clrWhite;                            // Color
int Font_Size = 9;                                      // Font size
bool DrawsNewsLines = true;                              // Draws lines at news
color Line_Color = clrRed;                               // Line color
ENUM_LINE_STYLE Line_Style = STYLE_DOT;                  // Line style
int Line_Width = 1;                                      // Line width
//
struct sNews
  {
   datetime          dTime;
   string            time;
   string            currency;
   string            importance;
   string            news;
   string            Actual;
   string            forecast;
   string            previus;
  };
string Language = "en-US";
sNews NewsTable[], Heads;
datetime date;
int TimeCorrection;
//+------------------------------------------------------------------+





//+------------------------------------------------------------------+
//|        دالة خطوط القناص                                          |
//+------------------------------------------------------------------+

double horizontalLine;
datetime verticalLine;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool IsNewBar_()
  {
   datetime currentBarTime = Time[0];
   datetime previousBarTime = Time[1];
   return (currentBarTime != previousBarTime);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+

double MaxDrawdown = 0; // تعريف متغير لتخزين قيمة أقصى سحب

// دالة لحساب أقصى سحب
double CalculateMaxDrawdown()
  {
   double maxDrawdown = 0;
   double peak = AccountBalance();

   for(int i = OrdersHistoryTotal() - 1; i >= 0; i--)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_HISTORY))
        {
         if(OrderType() <= OP_SELL && OrderCloseTime() > 0)  // صفقة مغلقة
           {
            double equity = AccountEquity();
            if(equity > peak)
              {
               peak = equity;
              }
            double drawdown = (peak - equity) / peak * 100;
            if(drawdown > maxDrawdown)
              {
               maxDrawdown = drawdown;
              }
           }
        }
     }
   return maxDrawdown;
  }



//+------------------------------------------------------------------+
int OnInit()
  {
   NewsTimer(true);
   START_BALANCE = AccountBalance();

//-------------------------------------------------------------------+
//                انشاء خطوط القناص
//-------------------------------------------------------------------+

   double currentClose = Close[0];
   horizontalLine = ObjectCreate(0, "HorizontalLine", OBJ_HLINE, 0, Time[0], currentClose);
   verticalLine = ObjectCreate(0, "VerticalLine", OBJ_VLINE, 0, Time[0], 0);


   return(INIT_SUCCEEDED);
  }

//+------------------------------------------------------------------+
//| Expert deinitialization function                                 |
//+------------------------------------------------------------------+
void OnDeinit(const int reason)
  {
   ObjectsDeleteAll(0, "nwsea", -1, -1);
   if(MQLInfoInteger(MQL_TESTER) == 0)
      ObjectsDeleteAll(0, "nwslea", -1, -1);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool NewsTimer(bool nb)
  {
   if(nb)
     {
      ObjectsDeleteAll(0, "nwsea", -1, -1);
      ObjectsDeleteAll(0, "nwslea", -1, -1);
      if(NewsFilter == true && ReadNews(NewsTable) && ArraySize(NewsTable) > 0)
         DrawNews(NewsTable);
      else
         return false;
     }
   datetime time = TimeCurrent();
   TimeCorrection = (-TimeGMTOffset());
//---
   for(int i = 0; i < ArraySize(NewsTable); i++)
     {
      datetime news_time = NewsTable[i].dTime + TimeCorrection;
      bool Importance_Check = false;
      if((!NewsImpLow && NewsTable[i].importance == "|LOW|") ||
         (!NewsImpMed && NewsTable[i].importance == "|MED|") ||
         (!NewsImpHigh && NewsTable[i].importance == "|HIGH|"))
         Importance_Check = true;
      if(Importance_Check || StringFind(Currencies_Check, NewsTable[i].currency, 0) == -1 || (Check_Specific_News  && (StringFind(NewsTable[i].news, Specific_News_Text) == -1)))
         continue;
      if((news_time <= time && (news_time + (StartAfterNews * 60)) >= time) ||
         (news_time >= time && (news_time - (StopBeforeNews * 60)) <= time))
        {
         Comment("News Time...");
         return false;
        }
      else
        {
         Comment("No News");
         return false;
        }
     }
   return false;
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void DelRow(sNews &l_a_news[], int row)
  {
   int size = ArraySize(l_a_news) - 1;
   for(int i = row; i < size; i++)
     {
      l_a_news[i].Actual = l_a_news[i + 1].Actual;
      l_a_news[i].currency = l_a_news[i + 1].currency;
      l_a_news[i].dTime = l_a_news[i + 1].dTime;
      l_a_news[i].forecast = l_a_news[i + 1].forecast;
      l_a_news[i].importance = l_a_news[i + 1].importance;
      l_a_news[i].news = l_a_news[i + 1].news;
      l_a_news[i].previus = l_a_news[i + 1].previus;
      l_a_news[i].time = l_a_news[i + 1].time;
     }
   ArrayResize(l_a_news, size);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool ReadNews(sNews &l_NewsTable[])
  {
   string cookie = NULL, referer = NULL, headers;
   char post[], result[];
   string tmpStr = "";
   string st_date = TimeToString(TimeCurrent(), TIME_DATE), end_date = TimeToString((TimeCurrent() + (datetime)(7 * 24 * 60 * 60)), TIME_DATE);
   StringReplace(st_date, ".", "");
   StringReplace(end_date, ".", "");
   string url = "http://calendar.fxstreet.com/EventDateWidget/GetMini?culture=" + Language + "&view=range&start=" + st_date + "&end=" + end_date + "&timezone=UTC" + "&columns=date%2Ctime%2Ccountry%2Ccountrycurrency%2Cevent%2Cconsensus%2Cprevious%2Cvolatility%2Cactual&showcountryname=false&showcurrencyname=true&isfree=true&_=1455009216444";
   ResetLastError();
   WebRequest("GET", url, cookie, referer, 10000, post, sizeof(post), result, headers);
   if(ArraySize(result) <= 0)
     {
      int er = GetLastError();
      ResetLastError();
      Print("ERROR_TXT IN WebRequest");
      if(er == 4060)
         MessageBox("YOU MUST ADD THE ADDRESS '" + "http://calendar.fxstreet.com/" + "' IN THE LIST OF ALLOWED URL IN THE TAB 'ADVISERS'", "ERROR_TXT", MB_ICONINFORMATION);
      return false;
     }
   tmpStr = CharArrayToString(result, 0, WHOLE_ARRAY, CP_UTF8);
   int handl = FileOpen("News.txt", FILE_WRITE | FILE_TXT);
   FileWrite(handl, tmpStr);
   FileFlush(handl);
   FileClose(handl);
   StringReplace(tmpStr, "&#39;", "'");
   StringReplace(tmpStr, "&#163;", "");
   StringReplace(tmpStr, "&#165;", "");
   StringReplace(tmpStr, "&amp;", "&");
   int st = StringFind(tmpStr, "fxst-thevent", 0);
   st = StringFind(tmpStr, ">", st) + 1;
   int end = StringFind(tmpStr, "</th>", st);
   Heads.news = (st < end ? StringSubstr(tmpStr, st, end - st) : "");
   st = StringFind(tmpStr, "fxst-thvolatility", 0);
   st = StringFind(tmpStr, ">", st) + 1;
   end = StringFind(tmpStr, "</th>", st);
   Heads.importance = (st < end ? StringSubstr(tmpStr, st, fmin(end - st, 8)) : "");
   st = StringFind(tmpStr, "fxst-thactual", 0);
   st = StringFind(tmpStr, ">", st) + 1;
   end = StringFind(tmpStr, "</th>", st);
   Heads.Actual = (st < end ? StringSubstr(tmpStr, st, fmin(end - st, 8)) : "");
   st = StringFind(tmpStr, "fxst-thconsensus", 0);
   st = StringFind(tmpStr, ">", st) + 1;
   end = StringFind(tmpStr, "</th>", st);
   Heads.forecast = (st < end ? StringSubstr(tmpStr, st, fmin(end - st, 8)) : "");
   st = StringFind(tmpStr, "fxst-thprevious", 0);
   st = StringFind(tmpStr, ">", st) + 1;
   end = StringFind(tmpStr, "</th>", st);
   Heads.previus = (st < end ? StringSubstr(tmpStr, st, end - st) : "");
   Heads.currency = "";
   Heads.dTime = 0;
   Heads.time = "";

   int startLoad = StringFind(tmpStr, "<tbody>", 0) + 7;
   int endLoad = StringFind(tmpStr, "</tbody>", startLoad);

   if(startLoad >= 0 && endLoad > startLoad)
     {
      tmpStr = StringSubstr(tmpStr, startLoad, endLoad - startLoad);
      while(StringReplace(tmpStr, "  ", " "));
     }

   else
      return false;
   int begin = -1;
   do
     {
      begin = StringFind(tmpStr, "<span", 0);
      if(begin >= 0)
        {
         end = StringFind(tmpStr, "</span>", begin) + 7;
         tmpStr = StringSubstr(tmpStr, 0, begin) + StringSubstr(tmpStr, end);
        }
     }
   while(begin >= 0);
   StringReplace(tmpStr, "<strong>", NULL);
   StringReplace(tmpStr, "</strong>", NULL);
   int BackShift = 0;
   string arNews[];
   for(uchar tr = 1; tr < 255; tr++)
     {
      if(StringFind(tmpStr, CharToString(tr), 0) > 0)
         continue;
      int K = StringReplace(tmpStr, "</tr>", CharToString(tr));
      //ArrayResize(arNews,StringReplace(tmpStr,"</tr>",CharToString(tr)));
      K = StringSplit(tmpStr, tr, arNews);
      ArrayResize(l_NewsTable, K);
      for(int td = 0; td < ArraySize(arNews); td++)
        {
         st = StringFind(arNews[td], "fxst-td-date", 0);
         if(st > 0)
           {
            st = StringFind(arNews[td], ">", st) + 1;
            end = StringFind(arNews[td], "</td>", st) - 1;
            int d = (int)StringToInteger(StringSubstr(arNews[td], end - 4, end - st));
            MqlDateTime time;
            TimeCurrent(time);
            if(d < (time.day - 5))
              {
               if(time.mon == 12)
                 {
                  time.mon = 1;
                  time.year++;
                 }
               else
                 {
                  time.mon++;
                 }
              }
            time.day = d;
            time.min = 0;
            time.hour = 0;
            time.sec = 0;
            date = StructToTime(time);
            BackShift++;
            continue;
           }
         st = StringFind(arNews[td], "fxst-evenRow", 0);
         if(st < 0)
           {
            BackShift++;
            continue;
           }
         int st1 = StringFind(arNews[td], "fxst-td-time", st);
         st1 = StringFind(arNews[td], ">", st1) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         l_NewsTable[td - BackShift].time = StringSubstr(arNews[td], st1, end - st1);
         if(StringFind(l_NewsTable[td - BackShift].time, ":") > 0)
           {
            l_NewsTable[td - BackShift].dTime = StringToTime(TimeToString(date, TIME_DATE) + " " + StringSubstr(arNews[td], st1, end - st1));
           }
         else
           {
            l_NewsTable[td - BackShift].dTime = date;
           }
         st1 = StringFind(arNews[td], "fxst-td-currency", st);
         st1 = StringFind(arNews[td], ">", st1) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         l_NewsTable[td - BackShift].currency = (st1 < end ? StringSubstr(arNews[td], st1, end - st1) : "");
         st1 = StringFind(arNews[td], "fxst-i-vol", st);
         st1 = StringFind(arNews[td], ">", st1) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         StringInit(l_NewsTable[td - BackShift].importance, (int)StringToInteger(StringSubstr(arNews[td], st1, end - st1)), '*');
         st1 = StringFind(arNews[td], "fxst-td-event", st);
         int st2 = StringFind(arNews[td], "fxst-eventurl", st1);
         st1 = StringFind(arNews[td], ">", fmax(st1, st2)) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         int end1 = StringFind(arNews[td], "</a>", st1);
         l_NewsTable[td - BackShift].news = StringSubstr(arNews[td], st1, (end1 > 0 ? fmin(end, end1) : end) - st1);
         st1 = StringFind(arNews[td], "fxst-td-act", st);
         st1 = StringFind(arNews[td], ">", st1) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         l_NewsTable[td - BackShift].Actual = (end > st1 ? StringSubstr(arNews[td], st1, end - st1) : "");
         st1 = StringFind(arNews[td], "fxst-td-cons", st);
         st1 = StringFind(arNews[td], ">", st1) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         l_NewsTable[td - BackShift].forecast = (end > st1 ? StringSubstr(arNews[td], st1, end - st1) : "");
         st1 = StringFind(arNews[td], "fxst-td-prev", st);
         st1 = StringFind(arNews[td], ">", st1) + 1;
         end = StringFind(arNews[td], "</td>", st1);
         l_NewsTable[td - BackShift].previus = (end > st1 ? StringSubstr(arNews[td], st1, end - st1) : "");
        }
      break;
     }
   ArrayResize(l_NewsTable, (ArraySize(l_NewsTable) - BackShift));
   return(true);
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void DrawNews(sNews &l_a_news[])
  {
   if(DrawsNewsLines || DrawsNewsChart)
     {
      if(NewsFilter == false)
         return;
      for(int i = ArraySize(l_a_news) - 1; i >= 0; i--)
        {
         StringReplace(l_a_news[i].currency, " ", "");
         int Currency_check_counter = 0;
         datetime t1 = (l_a_news[i].dTime + (datetime)(StartAfterNews * 60));
         datetime t2 = ((TimeCurrent() - (datetime)TimeCorrection));
         if(StringFind(Currencies_Check, l_a_news[i].currency) == -1 || t1 < t2 || (Check_Specific_News  && (StringFind(l_a_news[i].news, Specific_News_Text) == -1)))
           {
            DelRow(l_a_news, i);
            continue;
           }
         if((!NewsImpLow && l_a_news[i].importance == "|LOW|") ||
            (!NewsImpMed && l_a_news[i].importance == "|MED|") ||
            (!NewsImpHigh && l_a_news[i].importance == "|HIGH|"))
           {
            DelRow(l_a_news, i);
            continue;
           }
         string oName = ("nwslea " + l_a_news[i].currency + " " + l_a_news[i].importance + " " + l_a_news[i].news);
         if(DrawsNewsLines)
           {
            if(ObjectFind(0, oName) < 0)
              {
               ObjectCreate(0, oName, OBJ_VLINE, 0, l_a_news[i].dTime + TimeCorrection, 0);
               ObjectSetInteger(0, oName, OBJPROP_SELECTABLE, false);
               ObjectSetInteger(0, oName, OBJPROP_SELECTED, false);
               ObjectSetInteger(0, oName, OBJPROP_HIDDEN, true);
               ObjectSetInteger(0, oName, OBJPROP_BACK, false);
               ObjectSetInteger(0, oName, OBJPROP_COLOR, Line_Color);
               ObjectSetInteger(0, oName, OBJPROP_STYLE, Line_Style);
               ObjectSetInteger(0, oName, OBJPROP_WIDTH, Line_Width);
              }
           }
        }
      string oName;
      int K = 0, Z = 0;
      if(DrawsNewsChart)
        {
         for(int l = 1; l <= 9 && Z < ArraySize(l_a_news); l++)
           {
            for(K = Z; K < ArraySize(l_a_news); K++)
               if(l_a_news[K].currency != "")
                  break;
            Z = K + 1;
            oName = "nwsea_PANEL_NEWS_N" + (string)l;
            if(ObjectFind(0, oName) < 0)
               ObjectLabel(0, oName, 0, X + 110, Y - (int)(18 * (l + 5)), CORNER_LEFT_UPPER, ((TimeToString(l_a_news[K].dTime + TimeCorrection, TIME_DATE | TIME_MINUTES) + " " + l_a_news[K].currency + " " + l_a_news[K].importance + " " + l_a_news[K].news)), News_Font, Font_Size, Font_Color, 0, ANCHOR_LEFT_UPPER, false, false, true, 0);
           }
        }
      return;
     }
  }
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool ObjectLabel(const long              CHART_ID = 0,
                 const string            oName        = "",
                 const int               SUB_WINDOW  = 0,
                 const int               X_Axis      = 0,
                 const int               Y_Axis      = 0,
                 const ENUM_BASE_CORNER  CORNER      = CORNER_LEFT_UPPER,
                 const string            TEXT        = "",
                 const string            FONT        = "",
                 const int               FONT_SIZE   = 12,
                 const color             CLR         = color("255,0,0"),
                 const double            ANGLE       = 0.0,
                 const ENUM_ANCHOR_POINT ANCHOR      = ANCHOR_LEFT_UPPER,
                 const bool              BACK        = false,
                 const bool              SELECTION   = false,
                 const bool              HIDDEN      = true,
                 const long              ZORDER      = 0,
                 string                  TOOLTIP     = "\n")
  {
   ResetLastError();
   if(ObjectFind(0, oName) < 0)
     {
      ObjectCreate(CHART_ID, oName, OBJ_LABEL, SUB_WINDOW, 0, 0);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_XDISTANCE, X_Axis);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_YDISTANCE, Y_Axis);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_CORNER, CORNER);
      ObjectSetString(CHART_ID, oName, OBJPROP_TEXT, TEXT);
      ObjectSetString(CHART_ID, oName, OBJPROP_FONT, FONT);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_FONTSIZE, FONT_SIZE);
      ObjectSetDouble(CHART_ID, oName, OBJPROP_ANGLE, ANGLE);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_ANCHOR, ANCHOR);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_COLOR, CLR);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_BACK, BACK);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_SELECTABLE, SELECTION);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_SELECTED, SELECTION);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_HIDDEN, HIDDEN);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_ZORDER, ZORDER);
      ObjectSetString(CHART_ID, oName, OBJPROP_TOOLTIP, TOOLTIP);
     }
   else
     {
      ObjectSetInteger(CHART_ID, oName, OBJPROP_COLOR, CLR);
      ObjectSetString(CHART_ID, oName, OBJPROP_TEXT, TEXT);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_XDISTANCE, X);
      ObjectSetInteger(CHART_ID, oName, OBJPROP_YDISTANCE, Y);
     }
   return(true);
   ChartRedraw();
  }
//+------------------------------------------------------------------+
//| Expert tick function                                             |
//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
//| Custom function to draw trade boxes                              |
//+------------------------------------------------------------------+
void DrawTradeBoxes()
  {
// الحصول على عدد الصفقات المغلقة
   int totalTrades = OrdersHistoryTotal();

   for(int i = 0; i < totalTrades; i++)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_HISTORY))
        {
         // فقط الصفقات المغلقة
         if(OrderType() <= OP_SELL && OrderCloseTime() > 0)
           {
            double entryPrice = OrderOpenPrice();
            double exitPrice = OrderClosePrice();
            datetime entryTime = OrderOpenTime();
            datetime exitTime = OrderCloseTime();

            // حساب المكسب أو الخسارة بالدولار
            double profitLoss = OrderProfit();

            // رسم المربع باستخدام المستطيل
            string boxName = "TradeBox_" + IntegerToString(i);
            ObjectCreate(0, boxName, OBJ_RECTANGLE, 0, entryTime, entryPrice, exitTime, exitPrice);
            ObjectSetInteger(0, boxName, OBJPROP_COLOR, clrFireBrick); // لون حدود المربع
            ObjectSetInteger(0, boxName, OBJPROP_STYLE, STYLE_DASH); // نمط الخط
            ObjectSetInteger(0, boxName, OBJPROP_WIDTH, 1); // عرض الخط
            ObjectSetInteger(0, boxName, OBJPROP_BACK, false); // خلفية الكائن



            // تحديد موضع النص بناءً على نوع الصفقة
            double textPrice;
            if(OrderType() == OP_BUY)
               textPrice = entryPrice + (exitPrice - entryPrice) * 0.2; // في الأعلى لصفقات الشراء
            else
               textPrice = entryPrice - (exitPrice - entryPrice) * 0.2; // في الأسفل لصفقات البيع

            // إضافة النص
            string infoText = "$" + DoubleToString(profitLoss, 2);
            string textName = "TradeInfo_" + IntegerToString(i);
            ObjectCreate(0, textName, OBJ_TEXT, 0, (entryTime + exitTime) / 2, textPrice);
            ObjectSetString(0, textName, OBJPROP_TEXT, infoText);
            ObjectSetInteger(0, textName, OBJPROP_COLOR, clrFireBrick);
            ObjectSetInteger(0, textName, OBJPROP_FONTSIZE, 10);
            ObjectSetInteger(0, textName, OBJPROP_CORNER, 0);
            ObjectSetInteger(0, textName, OBJPROP_XDISTANCE, 0);
            ObjectSetInteger(0, textName, OBJPROP_YDISTANCE, 0);
            ObjectSetInteger(0, textName, OBJPROP_ANCHOR, ANCHOR_CENTER); // النص في المنتصف
            ObjectSetInteger(0, textName, OBJPROP_BACK, true); // التأكد من أن مستطيل المعلومات في المقدمة

           }
        }
     }
  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void st()
  {

   if(dynamic_lot == true)
     {
      double risk = risk_percentage_;
      double risk_in_per = risk/100;
      LotSize = risk_in_per * AccountBalance()  / 100;
     }

   if(dynamic_lot == false)
     {
      LotSize = Fixed_lot ;    // حجم اللوت الأساسي
     }


// تحديد الصفقة الأخيرة
   int lastOrderIndex = -1;
   datetime lastOrderTime = 0;
   int lossPoints = 0;
   int winPoints =0;



   double lastOrderOpenPrice = 0;
   int lastOrderType = -1;
   int lastOrderTicket = -1;
   double lastOrderProfit= 0;






   int num_off_active_trades = 0;

   if(OrdersTotal() > 0)
     {
      for(int i = 0; i < OrdersTotal(); i++)
        {
         if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
           {
            num_off_active_trades = OrdersTotal();
           }
        }
     }






   if(OrdersTotal() > 0)
     {
      for(int x = OrdersTotal() - 1; x >= 0; x--)
        {
         if(OrderSelect(x, SELECT_BY_POS, MODE_TRADES))
           {
            if(OrderOpenTime() > lastOrderTime)
              {
               lastOrderTime = OrderOpenTime();
               lastOrderIndex = x;
               lastOrderOpenPrice = OrderOpenPrice();
               lastOrderType = OrderType();
               lastOrderTicket = OrderTicket();
               lastOrderProfit = OrderProfit();
              }
           }
        }

      // بعد الانتهاء من تحديد الصفقة الأخيرة، قم بحساب نقاط الخسارة
      if(lastOrderIndex != -1)
        {

         double currentPrice;

         if(lastOrderType == OP_BUY)
           {
            currentPrice = Bid;
            if(lastOrderProfit<0)
              {
               lossPoints = (lastOrderOpenPrice - currentPrice) / Point;
              }

            if(lastOrderProfit>0)
              {
               winPoints = (lastOrderOpenPrice + currentPrice) / Point;
              }
           }
         else
            if(lastOrderType == OP_SELL)
              {
               currentPrice = Ask;
               if(lastOrderProfit<0)
                 {
                  lossPoints = (currentPrice - lastOrderOpenPrice) / Point;
                 }
               if(lastOrderProfit>0)
                 {
                  winPoints  = (lastOrderOpenPrice  - currentPrice) / Point;
                 }
              }
        }
     }









//------------------------------------------------------------

   double point_for_open_new_order = point_for_open_new_order_;


   double last_order_profit = 0;
   if(OrderSelect(OrdersHistoryTotal() - 1, SELECT_BY_POS, MODE_HISTORY))
     {
      if(OrderType() == OP_BUY || OrderType() == OP_SELL)
        {
         last_order_closed_time = OrderCloseTime();
         last_order_profit = OrderProfit();
        }
     }

// فتح صفقة جديدة بناءً على الصفقة الأخيرة
   if(OrdersTotal() > 0 && lossPoints >= point_for_open_new_order)
     {
      for(int iii = OrdersTotal() - 1; iii >= 0; iii--)
        {
         if(winPoints == point_for_open_new_order)
           {
            break;
           }
         if(OrderSelect(iii, SELECT_BY_POS, MODE_TRADES))
           {

            if(OrderType() == OP_BUY || OrderType() == OP_SELL)
              {

               double newLotSize = (currentLot * 2.5);
               if(OrderType() == OP_BUY)
                 {
                  // إذا كانت الصفقة الحالية شراء، افتح صفقة بيع
                  OrderSend(Symbol(), OP_SELL, newLotSize, Bid, 3, Bid + StopLoss * Point, Bid - TakeProfit * Point, 0, 0, 0, clrRed);
                 }
               else
                  if(OrderType() == OP_SELL)
                    {
                     // إذا كانت الصفقة الحالية بيع، افتح صفقة شراء
                     OrderSend(Symbol(), OP_BUY, newLotSize, Ask, 3, Ask - StopLoss * Point, Ask + TakeProfit * Point, 0, 0, 0, clrBlue);
                    }
               currentLot = newLotSize;
               Print("Opened new order: Type: ", OrderType(), ", Lot Size: ", newLotSize);

               break;  // التوقف بعد فتح الصفقة لضمان عدم تداخل العمليات
              }
           }
        }
     }












//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+



//------------------------------------------------------------------------
//                  middel box
//------------------------------------------------------------------------

// Create the rectangle using pixel coordinates
   if(ObjectCreate(0, "MyPixelRectangle2", OBJ_RECTANGLE_LABEL, 0, 0, 0))
     {
      // Set the rectangle properties
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_XSIZE, 400);        // Width in pixels
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_YSIZE, 11000);        // Height in pixels
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_CORNER, CORNER_LEFT_UPPER); // Anchor point
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_XDISTANCE, 5);         // X-distance from anchor
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_YDISTANCE, 85);         // Y-distance from anchor
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_BGCOLOR, clrFireBrick);         // Color
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_WIDTH, 2);              // Border width
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_STYLE, STYLE_SOLID);    // Border style
      ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_BACK, false); // التأكد من أن مستطيل المعلومات في المقدمة

      Print("Pixel rectangle created successfully.");
     }
   else
     {
      Print("Failed to create pixel rectangle.");
     }

// جعل المستطيل في الطبقة الأمامية
   ObjectSetInteger(0, "MyPixelRectangle2", OBJPROP_ZORDER, 1000);

//------------------------------------------------------------------------
//                  lower box
//------------------------------------------------------------------------

// Create the rectangle using pixel coordinates
   if(ObjectCreate(0, "MyPixelRectangle", OBJ_RECTANGLE_LABEL, 0, 0, 0))
     {
      // Set the rectangle properties
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_XSIZE, 400);        // Width in pixels
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_YSIZE, 130);        // Height in pixels
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_CORNER, CORNER_LEFT_LOWER); // Anchor point
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_XDISTANCE, 5);         // X-distance from anchor
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_YDISTANCE, 135);         // Y-distance from anchor
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_BGCOLOR, clrFireBrick);         // Color
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_WIDTH, 2);              // Border width
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_STYLE, STYLE_SOLID);    // Border style
      ObjectSetInteger(0, "MyPixelRectangle", OBJPROP_BACK, false); // التأكد من أن مستطيل المعلومات في المقدمة

      Print("Pixel rectangle created successfully.");
     }
   else
     {
      Print("Failed to create pixel rectangle.");
     }


//------------------------------------------------------------------------
//                  upper box
//------------------------------------------------------------------------


// Create the rectangle using pixel coordinates
   if(ObjectCreate(0, "MyPixelRectangle1", OBJ_RECTANGLE_LABEL, 0, 0, 0))
     {
      // Set the rectangle properties
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_XSIZE, 400);        // Width in pixels
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_YSIZE, 80);        // Height in pixels
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_CORNER, CORNER_LEFT_UPPER); // Anchor point
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_XDISTANCE, 5);         // X-distance from anchor
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_YDISTANCE, 5);         // Y-distance from anchor
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_BGCOLOR, clrFireBrick);         // Color
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_WIDTH, 2);              // Border width
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_STYLE, STYLE_SOLID);    // Border style
      ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_BACK, false); // التأكد من أن مستطيل المعلومات في المقدمة


      Print("Pixel rectangle created successfully.");
     }
   else
     {
      Print("Failed to create pixel rectangle.");
     }

// جعل المستطيل في الطبقة الأمامية
   ObjectSetInteger(0, "MyPixelRectangle1", OBJPROP_ZORDER, 1000);

//-------------------------------------------------------------------------------

// إنشاء النص لعرض المعلومات
   string REDSNIPER = "RED SNIPER";

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabeS", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabeS", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabeS", OBJPROP_XDISTANCE, 20); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabeS", OBJPROP_YDISTANCE, 15); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabeS", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabeS", OBJPROP_TEXT, REDSNIPER); // النص المعروض
   ObjectSetInteger(0, "InfoLabeS", OBJPROP_FONTSIZE, 35); // حجم الخط

//---------------------------------------------------------
// شيفرة لعرض السبريد في الجزء السفلي الأيسر
//---------------------------------------------------------

   double spread = (Ask - Bid) / Point /10; // حساب السبريد بالنقاط

// حذف الرسالة السابقة
   ObjectDelete("InfoLabel");

// إنشاء النص لعرض المعلومات
   string infoText = "Spread: " + DoubleToString(spread, 2) ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabel", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabel", OBJPROP_CORNER, CORNER_LEFT_LOWER);
   ObjectSetInteger(0, "InfoLabel", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabel", OBJPROP_YDISTANCE, 35); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabel", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabel", OBJPROP_TEXT, infoText); // النص المعروض
   ObjectSetInteger(0, "InfoLabel", OBJPROP_FONTSIZE, 11); // حجم الخط

//--------------------------------------------------------------------------------------
   double balance = AccountBalance(); // الحصول على رصيد الحساب

// حذف الرسالة السابقة
   ObjectDelete("InfoLabe2");

// إنشاء النص لعرض المعلومات
   string infoText1 = "Balance: " + DoubleToString(balance, 2)  ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe2", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe2", OBJPROP_CORNER, CORNER_LEFT_LOWER);
   ObjectSetInteger(0, "InfoLabe2", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe2", OBJPROP_YDISTANCE, 125); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe2", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe2", OBJPROP_TEXT, infoText1); // النص المعروض
   ObjectSetInteger(0, "InfoLabe2", OBJPROP_FONTSIZE, 11); // حجم الخط

//----------------------------------------------------------------------------------------

   double equity = AccountEquity(); // الحصول على رأس المال

// حذف الرسالة السابقة
   ObjectDelete("InfoLabe3");

// إنشاء النص لعرض المعلومات
   string infoText2 = "Equity: " + DoubleToString(equity, 2) + "$";

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe3", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe3", OBJPROP_CORNER, CORNER_LEFT_LOWER);
   ObjectSetInteger(0, "InfoLabe3", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe3", OBJPROP_YDISTANCE, 95); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe3", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe3", OBJPROP_TEXT, infoText2); // النص المعروض
   ObjectSetInteger(0, "InfoLabe3", OBJPROP_FONTSIZE, 11); // حجم الخط

//-------------------------------------------------------------------------------------------
// حساب السحب الحالي
   double currentDrawdown = CalculateMaxDrawdown();

// تحديث MaxDrawdown إذا كان السحب الحالي أكبر
   if(currentDrawdown > MaxDrawdown)
     {
      MaxDrawdown = currentDrawdown;
     }

// حذف الرسالة السابقة
   ObjectDelete("InfoLabe4");

// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText3 = "Max Drawdown: " + DoubleToString(MaxDrawdown, 2) + "%";

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe4", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe4", OBJPROP_CORNER, CORNER_LEFT_LOWER);
   ObjectSetInteger(0, "InfoLabe4", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe4", OBJPROP_YDISTANCE, 65); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe4", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe4", OBJPROP_TEXT, infoText3); // النص المعروض
   ObjectSetInteger(0, "InfoLabe4", OBJPROP_FONTSIZE, 11); // حجم الخط
//---------------------------------------------------------------------------------


// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText4 = "Initial Balance  : " + DoubleToString(START_BALANCE, 2) + "$" ;


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "START_BALANCE", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "START_BALANCE", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "START_BALANCE", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "START_BALANCE", OBJPROP_YDISTANCE, 130); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "START_BALANCE", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "START_BALANCE", OBJPROP_TEXT, infoText4); // النص المعروض
   ObjectSetInteger(0, "START_BALANCE", OBJPROP_FONTSIZE, 11); // حجم الخط

//---------------------------------------------------------------------------------

// Check if the start balance is zero before calculating the profit percentage
   double Profit_ = 0;
   double Profit_in_p = 0;
   if(START_BALANCE != 0)
     {
      double equity_ = AccountEquity();
      Profit_ = equity_ - START_BALANCE;
      double Profit_in_p_ = (Profit_ / START_BALANCE);
      Profit_in_p = Profit_in_p_ *100;
     }
// حذف الرسالة السابقة
   ObjectDelete("InfoLabe5");

// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText5 = "Profit : " + DoubleToString(Profit_in_p, 2) + " %" + "  ( " + DoubleToString(Profit_, 2) + "$ )";


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe5", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe5", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe5", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe5", OBJPROP_YDISTANCE, 155); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe5", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe5", OBJPROP_TEXT, infoText5); // النص المعروض
   ObjectSetInteger(0, "InfoLabe5", OBJPROP_FONTSIZE, 11); // حجم الخط

//-----------------------------------------------------------------------------------
   /*
   // حذف الرسالة السابقة
      ObjectDelete("InfoLabe6");

   // إنشاء النص لعرض المعلومات بشكل رأسي
      string infoText6 = "___________________________________"   ;


   // إنشاء الكائن النصي لعرض المعلومات
      ObjectCreate(0, "InfoLabe6", OBJ_LABEL, 0, 0, 0);
      ObjectSetInteger(0, "InfoLabe6", OBJPROP_CORNER, CORNER_LEFT_UPPER);
      ObjectSetInteger(0, "InfoLabe6", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
      ObjectSetInteger(0, "InfoLabe6", OBJPROP_YDISTANCE, 135); // المسافة من الحافة السفلية
      ObjectSetInteger(0, "InfoLabe6", OBJPROP_COLOR, clrWhite); // لون النص
      ObjectSetString(0, "InfoLabe6", OBJPROP_TEXT, infoText6); // النص المعروض
      ObjectSetInteger(0, "InfoLabe6", OBJPROP_FONTSIZE, 11); // حجم الخط

   */
//-------------------------------------------------------------------------------------
// حذف الرسالة السابقة
   ObjectDelete("InfoLabe7");

// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText7 = "Account Margin : " +DoubleToString(AccountMargin(), 2)  + "$"   ;


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe7", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe7", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe7", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe7", OBJPROP_YDISTANCE, 190); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe7", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe7", OBJPROP_TEXT, infoText7); // النص المعروض
   ObjectSetInteger(0, "InfoLabe7", OBJPROP_FONTSIZE, 11); // حجم الخط


//-------------------------------------------------------------------------------------
// حذف الرسالة السابقة
   ObjectDelete("InfoLabe9");


   int ACC_FREE_Ma = AccountFreeMargin() ;
// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText9 = "Account Free Margin : " + IntegerToString(ACC_FREE_Ma, 2) + "$"   ;


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe9", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe9", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe9", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe9", OBJPROP_YDISTANCE, 215); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe9", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe9", OBJPROP_TEXT, infoText9); // النص المعروض
   ObjectSetInteger(0, "InfoLabe9", OBJPROP_FONTSIZE, 11); // حجم الخط
//-------------------------------------------------------------------------------------
// حذف الرسالة السابقة
   ObjectDelete("InfoLabe10");


// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText10 = "Account Leverage 1:" + AccountLeverage() ;


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe10", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe10", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe10", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe10", OBJPROP_YDISTANCE, 240); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe10", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe10", OBJPROP_TEXT, infoText10); // النص المعروض
   ObjectSetInteger(0, "InfoLabe10", OBJPROP_FONTSIZE, 11); // حجم الخط

//-------------------------------------------------------------------------------------
// حذف الرسالة السابقة
   ObjectDelete("InfoLabe11");


// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText11 = "Account stopout level : " + AccountStopoutLevel() + "%"  ;


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe11", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe11", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe11", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe11", OBJPROP_YDISTANCE, 265); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe11", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe11", OBJPROP_TEXT, infoText11); // النص المعروض
   ObjectSetInteger(0, "InfoLabe11", OBJPROP_FONTSIZE, 11); // حجم الخط

//-------------------------------------------------------------------------------------
   double _equity_ = AccountEquity();
   double margin = AccountMargin();
   double margin_level = 0;

   if(margin != 0)
     {
      margin_level = (_equity_ / margin) * 100;
     }
   else
     {
      Print("Margin is zero, cannot calculate margin level.");
     }

   if(margin == 0)
     {
      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe12");
     }

// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText12 = "Account margin level : " + DoubleToString(margin_level, 2) + "%" ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe12", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe12", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe12", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe12", OBJPROP_YDISTANCE, 290); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe12", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe12", OBJPROP_TEXT, infoText12); // النص المعروض
   ObjectSetInteger(0, "InfoLabe12", OBJPROP_FONTSIZE, 11); // حجم الخط


//-------------------------------------------------------------------------------------


   string print_ticket = (" ");

   if(OrdersTotal() > 0)
     {
      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe13");
      print_ticket = ("Last active order Ticket: " + lastOrderTicket);

     }
   else
     {
      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe13");
     }




// إنشاء النص لعرض المعلومات بشكل رأسي
//string infoText13 = print_point ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe13", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe13", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe13", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe13", OBJPROP_YDISTANCE, 330); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe13", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe13", OBJPROP_TEXT, print_ticket); // النص المعروض
   ObjectSetInteger(0, "InfoLabe13", OBJPROP_FONTSIZE, 11); // حجم الخط


//-------------------------------------------------------------------------------------


   string print_point = (" ");

   if(OrdersTotal() > 0)
     {
      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe14");
      print_point = ("Loss Points: "+ lossPoints + " pips " + winPoints);

     }
   else
     {
      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe14");
     }




// إنشاء النص لعرض المعلومات بشكل رأسي
//string infoText13 = print_point ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe14", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe14", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe14", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe14", OBJPROP_YDISTANCE, 355); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe14", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe14", OBJPROP_TEXT, print_point); // النص المعروض
   ObjectSetInteger(0, "InfoLabe14", OBJPROP_FONTSIZE, 11); // حجم الخط

//-------------------------------------------------------------------------------------

   double buyLot = 0;
   int buyCount = 0;
   double buyProfit = 0;
   for(int b = 0; b < OrdersTotal(); b++)
     {
      if(OrderSelect(b, SELECT_BY_POS, MODE_TRADES))
        {
         if(OrderType() == OP_BUY)
           {
            buyProfit = OrderProfit();
            buyLot = OrderLots();
            buyCount++;
           }
        }
     }


   if(OrdersTotal()==0)
     {

      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe15");
     }

// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText15 = ("Buy orders : " + buyCount + "  ( "+ DoubleToString(buyProfit, 2)  + "$ )" + "  " + DoubleToString(buyLot, 2) + " Lot") ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe15", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe15", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe15", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe15", OBJPROP_YDISTANCE, 395); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe15", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe15", OBJPROP_TEXT, infoText15); // النص المعروض
   ObjectSetInteger(0, "InfoLabe15", OBJPROP_FONTSIZE, 11); // حجم الخط

//-------------------------------------------------------------------------------------

   double sellLot = 0;
   int sellCount = 0;
   double sellProfit = 0;
   for(int s = 0; s < OrdersTotal(); s++)
     {
      if(OrderSelect(s, SELECT_BY_POS, MODE_TRADES))
        {
         if(OrderType() == OP_SELL)
           {
            sellLot = OrderLots();
            sellProfit = OrderProfit();
            sellCount++;
           }
        }
     }


   if(OrdersTotal()==0)
     {

      // حذف الرسالة السابقة
      ObjectDelete("InfoLabe16");
     }

// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText16 = ("Sell orders : " + sellCount + "  ( "+ DoubleToString(sellProfit, 2) + "$ )" + "  " + DoubleToString(sellLot, 2) + " Lot") ;

// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "InfoLabe16", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "InfoLabe16", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "InfoLabe16", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "InfoLabe16", OBJPROP_YDISTANCE, 420); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "InfoLabe16", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "InfoLabe16", OBJPROP_TEXT, infoText16); // النص المعروض
   ObjectSetInteger(0, "InfoLabe16", OBJPROP_FONTSIZE, 11); // حجم الخط

//-------------------------------------------------------------------------------------
//  string ALERT_TIME_ = "EA is off ";

//if((TimeHour(TimeCurrent()) < stop_in_h))
// if((TimeHour(TimeCurrent()) >= start_in_h))
// {
   string     ALERT_TIME_ = "EA is ON ";
//}



// حذف الرسالة السابقة
   ObjectDelete("ALERT_TIME");
// إنشاء النص لعرض المعلومات بشكل رأسي
   string infoText8 = ALERT_TIME_   ;


// إنشاء الكائن النصي لعرض المعلومات
   ObjectCreate(0, "ALERT_TIME", OBJ_LABEL, 0, 0, 0);
   ObjectSetInteger(0, "ALERT_TIME", OBJPROP_CORNER, CORNER_LEFT_UPPER);
   ObjectSetInteger(0, "ALERT_TIME", OBJPROP_XDISTANCE, 10); // المسافة من الحافة اليسرى
   ObjectSetInteger(0, "ALERT_TIME", OBJPROP_YDISTANCE, 95); // المسافة من الحافة السفلية
   ObjectSetInteger(0, "ALERT_TIME", OBJPROP_COLOR, clrWhite); // لون النص
   ObjectSetString(0, "ALERT_TIME", OBJPROP_TEXT, infoText8); // النص المعروض
   ObjectSetInteger(0, "ALERT_TIME", OBJPROP_FONTSIZE, 14); // حجم الخط


  }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+




//-----------------------------












//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {


   if((TimeHour(TimeCurrent()) < stop_in_h))
      if((TimeHour(TimeCurrent()) >= start_in_h))

         if(OrdersTotal() == 0)

            if((TimeCurrent() - last_order_closed_time) >= 300)
              {
               startingLot = LotSize;
               currentLot = LotSize;
               // لا توجد صفقات مفتوحة، افتح صفقة جديدة
               OrderSend(Symbol(), OP_SELL, LotSize, Bid, 3, Bid + StopLoss * Point, Bid - TakeProfit  * Point, 0, 0, 0, clrRed);
              }

/*
   if(OrdersTotal() == MAX_OPEN_ORDERS)
     {
      // Close all open orders
      for(int iq=OrdersTotal()-1; iq>=0; iq--)
        {
         if(OrderSelect(iq, SELECT_BY_POS, MODE_TRADES))
           {
            int orderType = OrderType();
            double closePrice = 0.0;

            // Determine the close price based on the order type
            if(orderType == OP_BUY)
              {
               closePrice = Bid;
              }
            else
               if(orderType == OP_SELL)
                 {
                  closePrice = Ask;
                 }


            bool result = OrderClose(OrderTicket(), OrderLots(), closePrice, 3, clrRed);

            if(!result)
              {
               Print("Failed to close order ", OrderTicket(), " Error: ", GetLastError());
              }

           }
        }
     }
*/

   bool newBar = IsNewBar();
   if(NewsFilter)
     {
      if(NewsTimer(newBar))
        {
         if(CloseBeforeNews)
            // insert here Your close all func
            return;
        }
     }

//--------------------------------------------------------

// when it goes up
   if(Close[2] < Close[1])
     {
      // set the body color for bull candles
      ChartSetInteger(NULL, CHART_COLOR_CANDLE_BULL, clrWhiteSmoke);

      // set the body color for bear candles
      ChartSetInteger(NULL, CHART_COLOR_CANDLE_BEAR, clrRed);

      ChartSetInteger(NULL, CHART_COLOR_CHART_LINE, clrRed);
      ChartSetInteger(NULL, CHART_COLOR_VOLUME, clrRed);
      ChartSetInteger(NULL, CHART_COLOR_ASK, clrRed);
      ChartSetInteger(NULL, CHART_COLOR_BID, clrRed);

      // set the outer color for bull candles
      ChartSetInteger(NULL, CHART_COLOR_CHART_UP, clrWhite);

      // set the outer color for bear candles
      ChartSetInteger(NULL, CHART_COLOR_CHART_DOWN, clrRed);

      // set the candle type to bars
      ChartSetInteger(NULL, CHART_MODE, CHART_CANDLES);

      // set the grid to visible
      ChartSetInteger(NULL, CHART_SHOW_GRID, false);

      // set the foreground color for data
      ChartSetInteger(NULL, CHART_COLOR_FOREGROUND, clrRed);

      // set the background color
      ChartSetInteger(NULL, CHART_COLOR_BACKGROUND, clrBlack);

     }



//+------------------------------------------------------------------+
//|   تحديث الخطوط عند بدء شمعة جديدة                                                                |
//+------------------------------------------------------------------+
   if(IsNewBar_())
     {
      double currentClose = Close[0];
      double lastHigh = iHigh(Symbol(), PERIOD_CURRENT, 0);
      double lastLow = iLow(Symbol(), PERIOD_CURRENT, 0);

      ObjectMove(0, "HorizontalLine", 0, Time[0], currentClose);
      ObjectMove(0, "VerticalLine", 0, Time[0], lastHigh - lastLow);
     }


//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
   st();
   if(graphic == true)
     {
      // G();
     }

   if(summary_box == true)
     {
      DrawTradeBoxes();
     }



//+------------------------------------------------------------------+
  }
//+------------------------------------------------------------------+
bool IsNewBar()
  {
   static datetime lastbar;
   datetime curbar = (datetime)SeriesInfoInteger(_Symbol, _Period, SERIES_LASTBAR_DATE);
   if(lastbar != curbar)
     {
      lastbar = curbar;
      return true;
     }
   return false;
  }

//+------------------------------------------------------------------+

//+------------------------------------------------------------------+

//+------------------------------------------------------------------+

//+------------------------------------------------------------------+
