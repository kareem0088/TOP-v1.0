//+------------------------------------------------------------------+
//|                                                      ProjectName |
//|                                      Copyright 2018, CompanyName |
//|                                       http://www.companyname.net |
//+------------------------------------------------------------------+
#define BARS_LOOKBACK 20
#define MAX_ORDER_AGE_BARS 20
#define MAX_PENDING_ORDERS 1
#define MAX_DOUBLE_LOT 0.32 // الحد الأقصى لمضاعفة حجم اللوت

string higherHighArrowName = "";
string lowerLowArrowName = "";
double lastKnownHigherHigh = 0;
double lastKnownLowerLow = 0;

input double start_lot = 0.01;
double double_lot = start_lot;
double double_lot_in_order;

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double FindLastHigherHigh(int barsLookback, int &index)
  {
   double highestHigh = High[1]; // بدء من الشمعة الثانية (High[1])
   index = 1;

   for(int i = 2; i <= barsLookback; i++)    // حلقة عبر الشموع المطلوبة
     {
      double high = High[i];
      if(high > highestHigh)
        {
         highestHigh = high;
         index = i;
        }
     }

   return highestHigh;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
double FindLastLowerLow(int barsLookback, int &index)
  {
   double lowestLow = Low[1]; // بدء من الشمعة الثانية (Low[1])
   index = 1;

   for(int i = 2; i <= barsLookback; i++)    // حلقة عبر الشموع المطلوبة
     {
      double low = Low[i];
      if(low < lowestLow)
        {
         lowestLow = low;
         index = i;
        }
     }

   return lowestLow;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void DrawArrow(string &currentArrowName, string namePrefix, int timeIndex, double price, color arrowColor)
  {
// حذف السهم القديم إذا كان موجودًا
   if(currentArrowName != "")
     {
      ObjectDelete(currentArrowName);
     }

// إنشاء اسم جديد للسهم
   string newName = namePrefix + "_" + TimeToString(Time[timeIndex], TIME_DATE|TIME_MINUTES);
   currentArrowName = newName;

// إنشاء السهم الجديد
   ObjectCreate(0, newName, OBJ_ARROW, 0, Time[timeIndex], price);
   ObjectSetInteger(0, newName, OBJPROP_COLOR, arrowColor);
   ObjectSetInteger(0, newName, OBJPROP_WIDTH, 2);
   ObjectSetInteger(0, newName, OBJPROP_ARROWCODE, 233); // Arrow code 233 is a suitable arrow style
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void PlaceBuyStopOrder(double price, double lotSize, double slippage, double stopLoss, double takeProfit)
  {
   int ticket = OrderSend(Symbol(), OP_BUYLIMIT, lotSize, price, slippage, price - stopLoss, price + takeProfit, "Buy Stop Order", 0, 0, Blue);
   if(ticket < 0)
     {
      Print("Error placing buy stop order: ", GetLastError());
     }
   else
     {
      Print("Buy stop order placed successfully. Ticket: ", ticket);
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void PlaceSellStopOrder(double price, double lotSize, double slippage, double stopLoss, double takeProfit)
  {
   int ticket = OrderSend(Symbol(), OP_SELLLIMIT, lotSize, price, slippage, price + stopLoss, price - takeProfit, "Sell Stop Order", 0, 0, Red);
   if(ticket < 0)
     {
      Print("Error placing sell stop order: ", GetLastError());
     }
   else
     {
      Print("Sell stop order placed successfully. Ticket: ", ticket);
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
bool AreThereOpenTrades()
  {
   for(int i = OrdersTotal() - 1; i >= 0; i--)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
         if(OrderType() == OP_BUY || OrderType() == OP_SELL)
           {
            return true;
           }
        }
     }
   return false;
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void DeleteOldPendingOrders(int maxOrderAgeBars)
  {
   int currentTime = Time[0]; // الوقت الحالي

   for(int i = OrdersTotal() - 1; i >= 0; i--)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
         if(OrderType() == OP_BUYLIMIT || OrderType() == OP_SELLLIMIT)
           {
            int orderOpenTime = OrderOpenTime();
            int orderAgeBars = (currentTime - orderOpenTime) / PeriodSeconds(); // حساب عمر الأمر بالشمعات
            if(orderAgeBars > maxOrderAgeBars)
              {
               OrderDelete(OrderTicket());
               Print("Deleted old pending order. Ticket: ", OrderTicket());
              }
           }
        }
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int CountPendingOrders(int orderType)
  {
   int count = 0;
   for(int i = OrdersTotal() - 1; i >= 0; i--)
     {
      if(OrderSelect(i, SELECT_BY_POS, MODE_TRADES))
        {
         if(OrderType() == orderType)
           {
            count++;
           }
        }
     }
   return count;
  }

double MyPoint;
double LAST_ORDER_TYPE;
//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
int OnInit()
  {
   if(Digits==4 || Digits<=2)
      MyPoint=Point;
   if(Digits==3 || Digits==5)
      MyPoint=Point*10;
   int ticketbid = OrderSend(Symbol(), OP_SELL, 0.01, Bid, 3, Bid + 2*MyPoint, Bid - 2*MyPoint, 0, 0, 0, clrRed);
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void st()
  {
   int totalOrders = OrdersHistoryTotal();

// Print the lot size of the last order
   double O1 = 0;
   double O1_L = 0;
   if(totalOrders > 0)
     {
      if(OrderSelect(totalOrders - 1, SELECT_BY_POS, MODE_HISTORY))
        {
         if(OrderType() == OP_BUY || OrderType() == OP_SELL)
           {
            O1 = OrderProfit();
            O1_L = OrderLots();
            LAST_ORDER_TYPE = OrderType();
            Print("Lot size of the last order: ", O1_L);
            Print("PROFIT of the last order: ", O1);
            Print(OrderType());
           }
        }
     }



// Print the lot size of the last order nub 2
   double O2 = 0;
   double O2_L = 0;
   if(totalOrders > 0)
     {
      if(OrderSelect(totalOrders - 2, SELECT_BY_POS, MODE_HISTORY))
        {
         if(OrderType() == OP_BUY || OrderType() == OP_SELL)
           {
            O2 = OrderProfit();
            O2_L = OrderLots();
            LAST_ORDER_TYPE = OrderType();
            Print("Lot size of the last order nub 2: ", O2_L);
            Print("PROFIT of the last order nub 2: ", O2);
            Print(OrderType());
           }
        }
     }


// if (O1 < 0 && O1_L == 100 && (OrderType() == OP_BUY || OrderType() == OP_SELL )) {
//   double_lot = start_lot;
//}
   /*
      if(O1 > 0 && (LAST_ORDER_TYPE == 1 || LAST_ORDER_TYPE == 0))
        {
         double_lot = start_lot;
        }

      if(O1 < 0 && (LAST_ORDER_TYPE == 1 || LAST_ORDER_TYPE == 0) && double_lot < MAX_DOUBLE_LOT)
        {
         double_lot *= 2;
        }
      if(double_lot > MAX_DOUBLE_LOT)
        {
         double_lot = start_lot; // Reset to starting lot if maximum limit is exceeded
        }
        */



   if(O1 > 0)
     {
      double_lot = start_lot;
     }
   if(O1 < 0)
     {
      double_lot = 0.15;
     }
   if(O1_L==0.15 && O1 < 0)
     {
      double_lot = 0;
     }


// المعلمات
   double lotSize = double_lot; // حجم اللوت
   double slippage = 3;  // الانزلاق السعري
   double stopLoss = 400 * Point; // وقف الخسارة
   double takeProfit = 40 * Point; // جني الأرباح

// حذف الأوامر المعلقة القديمة
   DeleteOldPendingOrders(MAX_ORDER_AGE_BARS);

// العثور على آخر قمة وأخر قاع
   int higherHighIndex, lowerLowIndex;
   double currentHigherHigh = FindLastHigherHigh(BARS_LOOKBACK, higherHighIndex);
   double currentLowerLow = FindLastLowerLow(BARS_LOOKBACK, lowerLowIndex);


   double EMA;
   EMA = iMA(NULL, 0, 70, 0, MODE_EMA, PRICE_CLOSE, 0);



// التحقق من وجود قمة جديدة
   if(currentHigherHigh != lastKnownHigherHigh)
     {
      // رسم السهم الجديد
      DrawArrow(higherHighArrowName, "LastHigherHighArrow", higherHighIndex, currentHigherHigh, Blue);

      // إذا لم تكن هناك صفقات مفتوحة ولا يوجد أكثر من أمرين معلقين للشراء، ضع أمر جديد
      if(!AreThereOpenTrades() && CountPendingOrders(OP_SELLLIMIT) < MAX_PENDING_ORDERS)
        {
         if(EMA > Ask)
           {
            PlaceSellStopOrder(currentHigherHigh, lotSize, slippage, stopLoss, takeProfit);
           }
        }

      // تحديث القمة المعروفة الأخيرة
      lastKnownHigherHigh = currentHigherHigh;
     }

// التحقق من وجود قاع جديد
   if(currentLowerLow != lastKnownLowerLow)
     {
      // رسم السهم الجديد
      DrawArrow(lowerLowArrowName, "LastLowerLowArrow", lowerLowIndex, currentLowerLow, Red);

      // إذا لم تكن هناك صفقات مفتوحة ولا يوجد أكثر من أمرين معلقين للبيع، ضع أمر جديد
      if(!AreThereOpenTrades() && CountPendingOrders(OP_BUYLIMIT) < MAX_PENDING_ORDERS)
        {
         if(EMA < Ask)
           {
            PlaceBuyStopOrder(currentLowerLow, lotSize, slippage, stopLoss, takeProfit);
           }
        }

      // تحديث القاع المعروف الأخير
      lastKnownLowerLow = currentLowerLow;
     }
  }

//+------------------------------------------------------------------+
//|                                                                  |
//+------------------------------------------------------------------+
void OnTick()
  {
   st();
  }
//+------------------------------------------------------------------+
